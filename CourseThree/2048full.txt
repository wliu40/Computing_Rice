http://www.codeskulptor.org/#user42_WoQbRr9Law_29.py

"""
Clone of 2048 game.
"""
import random as rm
import poc_2048_gui

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.
OFFSETS = {UP: (1, 0),
           DOWN: (-1, 0),
           LEFT: (0, 1),
           RIGHT: (0, -1)}

def merge(line):
    """
    Helper function that merges a single row or column in 2048
    """
    # replace with your code from the previous mini-project
    temp_line = []
    for element in line:
        if element is not 0:
            temp_line.append(element)
    while(len(temp_line) < len(line)):
          temp_line.append(0)
    
   
    result_line = []
    result_line.append(temp_line[0])
    cnt = 1
    flag = 0
    
    while cnt < len(line):

        if temp_line[cnt] == result_line[-1] and flag == 0:
            result_line[-1] *= 2
            flag = 1
        else:
            result_line.append(temp_line[cnt])
            flag = 0
        cnt += 1
        
    while(len(result_line) < len(line)):
          result_line.append(0)
    
    
    return result_line


class TwentyFortyEight:
    """
    Class to run the game logic.
    """

    def __init__(self, grid_height, grid_width):
        # replace with your code
        self._grid_height = grid_height
        self._grid_width = grid_width
        self._left_ends, self._right_ends, self._up_ends, self._buttom_ends = [],[],[],[]
        for dummy_row in range(grid_height):
            self._left_ends.append((dummy_row, 0))
            self._right_ends.append((dummy_row, grid_width-1))
        for dummy_col in range(grid_width):
            self._up_ends.append((0, dummy_col))
            self._buttom_ends.append((grid_height-1, dummy_col))
        
        self._cells = [ [0 for dummy_col in range(self._grid_width)] 
                         for dummy_row in range(self._grid_height)] 



    def reset(self):
        """
        Reset the game so the grid is empty except for two
        initial tiles.
        """
        self._cells = [ [0 for dummy_col in range(self._grid_width)] 
                           for dummy_row in range(self._grid_height)]
        (row1, col1) = (0,0)
        (row2, col2) = (0,0)
        while(row1 == row2 and col1 == col2):
            
            (row1, col1) = (rm.randrange(0,self._grid_height),
                            rm.randrange(0, self._grid_width))
            (row2, col2) = (rm.randrange(0,self._grid_height),
                            rm.randrange(0, self._grid_width))
        if self._cells[row1][col1] == 0:
            self.set_tile(row1, col1, 2)
        if self._cells[row2][col2] == 0: 
            self.set_tile(row2, col2, 2)
       

    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        # replace with your code
        str_grid = "["
        str_grid += str(self._cells[0])
        str_grid += '\n'
        for row in range(1, self._grid_height):
            str_grid += " "
            str_grid += str(self._cells[row])         
            str_grid += '\n'  
        return str_grid[:-1] + ']'

    def get_grid_height(self):
        """
        Get the height of the board.
        """
        return self._grid_height

    def get_grid_width(self):
        """
        Get the width of the board.
        """
        return self._grid_width


    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        Suppose the width == height
        """
        #deep copy old_cells from self._cells for later comparison        
        old_cells = []
        for row in self._cells:
            old_cells.append(list(row))
        
        direction_dict = {LEFT:self._left_ends, RIGHT:self._right_ends,
                          UP: self._up_ends, DOWN: self._buttom_ends}
        #handle the case when the matrix is not square  
        cell_size_dict = {LEFT:self._grid_width, RIGHT:self._grid_width,
                          UP:self._grid_height,DOWN:self._grid_height}
        
        for (start_row, start_col) in direction_dict[direction]:
            
            grid_numbers = []
            cell_index = []

            for step in range(cell_size_dict[direction]):
                cell_index.append((start_row, start_col))
                grid_numbers.append(self._cells[start_row][start_col])                
                start_row += OFFSETS[direction][0]
                start_col += OFFSETS[direction][1]

            new_order = merge(grid_numbers)
            for step in range(cell_size_dict[direction]):
                self.set_tile(cell_index[step][0], cell_index[step][1], new_order[step])
        
        exit_flag = True
        for row in range(self._grid_height):
            for col in range(self._grid_width):
                if self._cells[row][col] == 0:
                    exit_flag = False
                    break
            if not exit_flag:
                break

        if exit_flag:
            print "GAME OVER"
            
        if not old_cells == self._cells:
            self.new_tile()

    def new_tile(self):
        """
        Create a new tile in a randomly selected empty
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        rand_num = rm.randrange(0,10)
        if( rand_num < 9):
            tile_num = 2
        else:
            tile_num = 4
            
        (rand_row, rand_col) = (rm.randrange(0,self._grid_height),
                            rm.randrange(0, self._grid_width))
                
        while (self._cells[rand_row][rand_col] is not 0):
            (rand_row, rand_col) = (rm.randrange(0,self._grid_height),
                            rm.randrange(0, self._grid_width))
        self.set_tile(rand_row,rand_col,tile_num)     

    def set_tile(self, row, col, value):
        """
        Set the tile at position row, col to have the given value.
        """
        self._cells[row][col] = value

    def get_tile(self, row, col):
        """
        Return the value of the tile at position row, col.
        """
        return self._cells[row][col]


poc_2048_gui.run_gui(TwentyFortyEight(4, 4))
print TwentyFortyEight(4, 4)
