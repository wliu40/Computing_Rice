http://www.codeskulptor.org/#user38_VmnFt4FQDkLue1p.py

http://www.codeskulptor.org/#user39_0EheCd26qL_0.py



# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 10
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
vel = [0,0]
ball_pos = [WIDTH / 2, HEIGHT / 2]
paddle1_pos = [HALF_PAD_WIDTH, HEIGHT / 2]
paddle2_pos = [WIDTH - HALF_PAD_WIDTH, HEIGHT / 2]
paddle1_vel = [0 , 0]
paddle2_vel = [0 , 0]
score1 = 0
score2 = 0


# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    if direction:        
        ball_vel = [2, -1]
    else: 
        ball_vel = [-2,-1]
 
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    paddle1_pos = [HALF_PAD_WIDTH, HEIGHT / 2]
    paddle2_pos = [WIDTH - HALF_PAD_WIDTH, HEIGHT / 2]
    paddle1_vel = [0, 0]
    paddle2_vel = [0, 0]
    Left_or_right = random.randrange(0,2)
    spawn_ball(Left_or_right)
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
 
    # update ball
       
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White")
    # update paddle's vertical position, keep paddle on the screen

  #  if (paddle1_pos[1] <= HEIGHT - HALF_PAD_HEIGHT and paddle1_pos[1] >= HALF_PAD_HEIGHT):        
    paddle1_pos[0] += paddle1_vel[0]
    paddle1_pos[1] += paddle1_vel[1]
    if paddle1_pos[1] < HALF_PAD_HEIGHT:
        paddle1_pos[1] = HALF_PAD_HEIGHT
    elif paddle1_pos[1] > HEIGHT - HALF_PAD_HEIGHT:
        paddle1_pos[1] = HEIGHT - HALF_PAD_HEIGHT
        
          
    paddle2_pos[0] += paddle2_vel[0]
    paddle2_pos[1] += paddle2_vel[1]
    if paddle2_pos[1] < HALF_PAD_HEIGHT:
        paddle2_pos[1] = HALF_PAD_HEIGHT
    elif paddle2_pos[1] > HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos[1] = HEIGHT - HALF_PAD_HEIGHT
    
    # Update ball position
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]   

    # collide and reflect off of left hand side of canvas
    #left
    if (ball_pos[0] <= BALL_RADIUS + PAD_WIDTH):
        if (ball_pos[1] >= paddle1_pos[1] - HALF_PAD_HEIGHT\
            and ball_pos[1] <= paddle1_pos[1] + HALF_PAD_HEIGHT):
            ball_vel[0] *= 1.2
            ball_vel[1] *= 1.2
            ball_vel[0] = - ball_vel[0]
        else:
            score1 += 1
            return spawn_ball(RIGHT)
    #up
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
        
    #right
    
    if (ball_pos[0] >= WIDTH - BALL_RADIUS - PAD_WIDTH):
        if (ball_pos[1] >= paddle2_pos[1] - HALF_PAD_HEIGHT\
            and ball_pos[1] <= paddle2_pos[1] + HALF_PAD_HEIGHT):
            ball_vel[0] *= 1.2
            ball_vel[1] *= 1.2
            ball_vel[0] = - ball_vel[0]
        else:
            score2 += 1
            return spawn_ball(LEFT)  
    #bottom
    if ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]  
    
    # draw paddles
    # Left horizontal -
    canvas.draw_line([paddle1_pos[0] - PAD_WIDTH / 2, paddle1_pos[1] - HALF_PAD_HEIGHT],\
                     [paddle1_pos[0] + PAD_WIDTH / 2, paddle1_pos[1] - HALF_PAD_HEIGHT],\
                     3,"Red") 
    # Left horizontal -
    canvas.draw_line([paddle1_pos[0] - PAD_WIDTH / 2, paddle1_pos[1] + HALF_PAD_HEIGHT],\
                     [paddle1_pos[0] + PAD_WIDTH / 2, paddle1_pos[1] + HALF_PAD_HEIGHT],\
                     3,"Red")
    # Right vertical |
    canvas.draw_line([paddle1_pos[0] + PAD_WIDTH / 2, paddle1_pos[1] - HALF_PAD_HEIGHT],\
                     [paddle1_pos[0] + PAD_WIDTH / 2, paddle1_pos[1] + HALF_PAD_HEIGHT],\
                     3,"Red")
    # Left vertical |
    canvas.draw_line([paddle1_pos[0] - PAD_WIDTH / 2, paddle1_pos[1] - HALF_PAD_HEIGHT],\
                     [paddle1_pos[0] - PAD_WIDTH / 2, paddle1_pos[1] + HALF_PAD_HEIGHT],\
                     3,"Red")
    # Left horizontal -
    canvas.draw_line([paddle2_pos[0] - PAD_WIDTH / 2, paddle2_pos[1] - HALF_PAD_HEIGHT],\
                     [paddle2_pos[0] + PAD_WIDTH / 2, paddle2_pos[1] - HALF_PAD_HEIGHT],\
                     3,"Yellow") 
    # Left horizontal -
    canvas.draw_line([paddle2_pos[0] - PAD_WIDTH / 2, paddle2_pos[1] + HALF_PAD_HEIGHT],\
                     [paddle2_pos[0] + PAD_WIDTH / 2, paddle2_pos[1] + HALF_PAD_HEIGHT],\
                     3,"Yellow")
    # Right vertical |
    canvas.draw_line([paddle2_pos[0] + PAD_WIDTH / 2, paddle2_pos[1] - HALF_PAD_HEIGHT],\
                     [paddle2_pos[0] + PAD_WIDTH / 2, paddle2_pos[1] + HALF_PAD_HEIGHT],\
                     3,"Yellow")
    # Left vertical |
    canvas.draw_line([paddle2_pos[0] - PAD_WIDTH / 2, paddle2_pos[1] - HALF_PAD_HEIGHT],\
                     [paddle2_pos[0] - PAD_WIDTH / 2, paddle2_pos[1] + HALF_PAD_HEIGHT],\
                     3,"Yellow")

    
    # draw scores
 # and paddle1_pos[1] <= HEIGHT - HALF_PAD_HEIGHT and paddle1_pos[1] >= HALF_PAD_HEIGHT  
    canvas.draw_text(str(score2), [250,50], 40, "Red")
    canvas.draw_text(str(score1), [325,50], 40, "Yellow")
    canvas.draw_text(':', [293,50], 40, "White")
    canvas.draw_text('score', [280,20], 20, "White")
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    acc = 5
    
    if key==simplegui.KEY_MAP["W"]:        
        paddle1_vel[1] -= acc
    elif key==simplegui.KEY_MAP["S"]:
        paddle1_vel[1] += acc
    elif key==simplegui.KEY_MAP["down"]:
        paddle2_vel[1] += acc
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel[1] -= acc

   
def keyup(key):
    global paddle1_vel, paddle2_vel
    paddle1_vel = [0, 0]
    paddle2_vel = [0, 0]
    


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button('START', new_game)
#timer = simplegui.create_timer(1000, increase)
# start frame
new_game()
frame.start()
